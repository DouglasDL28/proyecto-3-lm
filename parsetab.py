
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftBICONDICIONALCONDICIONALleftNEGACIONCONJUNCIONDISYUNCIONBICONDICIONAL CONDICIONAL CONJUNCION CONST DISYUNCION LPAREN NEGACION RPAREN VAR\n    expression : expression CONJUNCION expression\n               | expression DISYUNCION expression\n               | expression BICONDICIONAL expression\n               | expression CONDICIONAL expression\n    \n    expression : NEGACION expression\n    \n    expression : VAR\n               | CONST\n    \n    empty :\n    expression : LPAREN expression RPAREN'
    
_lr_action_items = {'NEGACION':([0,2,5,6,7,8,9,],[2,2,2,2,2,2,2,]),'VAR':([0,2,5,6,7,8,9,],[3,3,3,3,3,3,3,]),'CONST':([0,2,5,6,7,8,9,],[4,4,4,4,4,4,4,]),'LPAREN':([0,2,5,6,7,8,9,],[5,5,5,5,5,5,5,]),'$end':([1,3,4,10,12,13,14,15,16,],[0,-6,-7,-5,-1,-2,-3,-4,-9,]),'CONJUNCION':([1,3,4,10,11,12,13,14,15,16,],[6,-6,-7,-5,6,-1,-2,6,6,-9,]),'DISYUNCION':([1,3,4,10,11,12,13,14,15,16,],[7,-6,-7,-5,7,-1,-2,7,7,-9,]),'BICONDICIONAL':([1,3,4,10,11,12,13,14,15,16,],[8,-6,-7,-5,8,-1,-2,-3,-4,-9,]),'CONDICIONAL':([1,3,4,10,11,12,13,14,15,16,],[9,-6,-7,-5,9,-1,-2,-3,-4,-9,]),'RPAREN':([3,4,10,11,12,13,14,15,16,],[-6,-7,-5,16,-1,-2,-3,-4,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,5,6,7,8,9,],[1,10,11,12,13,14,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression CONJUNCION expression','expression',3,'p_expression','calc.py',59),
  ('expression -> expression DISYUNCION expression','expression',3,'p_expression','calc.py',60),
  ('expression -> expression BICONDICIONAL expression','expression',3,'p_expression','calc.py',61),
  ('expression -> expression CONDICIONAL expression','expression',3,'p_expression','calc.py',62),
  ('expression -> NEGACION expression','expression',2,'p_negation','calc.py',69),
  ('expression -> VAR','expression',1,'p_expression_var_const','calc.py',76),
  ('expression -> CONST','expression',1,'p_expression_var_const','calc.py',77),
  ('empty -> <empty>','empty',0,'p_empty','calc.py',84),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_parens','calc.py',90),
]
